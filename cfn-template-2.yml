AWSTemplateFormatVersion: 2010-09-09

Description: >
  This Cloudformation Template deploys Phonebook Application to five Docker Machines on EC2 Instances
  which are ready for Docker Swarm operations.

Parameters:
  KeyName:
    Description: Enter the name of your Key Pair for SSH connections.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must one of the existing EC2 KeyPair
Resources:
  GrandMasterLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        KeyName: !Ref KeyName
        UserData: !Base64 |
          #! /bin/bash
          yum update -y
          hostnamectl set-hostname Grand-Master
          amazon-linux-extras install docker -y
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
          -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker swarm init
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
          docker service create \
            --name=viz \
            --publish=8080:8080/tcp \
            --constraint=node.role==manager \
            --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
            dockersamples/visualizer
          yum install git -y
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          yum install amazon-ecr-credential-helper -y
          mkdir -p /home/ec2-user/.docker
          cd /home/ec2-user/.docker
          echo '{"credsStore": "ecr-login"}' > config.json
          aws ecr create-repository \
              --repository-name ${APP_REPO_NAME} \
              --image-scanning-configuration scanOnPush=false \
              --image-tag-mutability MUTABLE \
              --region ${AWS::Region}
          docker build --force-rm -t "${ECR_REGISTRY}/${APP_REPO_NAME}:latest" ${GITHUB_REPO}
          docker push "${ECR_REGISTRY}/${APP_REPO_NAME}:latest"
          mkdir -p /home/ec2-user/phonebook
          cd /home/ec2-user/phonebook
          cat << EOF | tee .env
          ECR_REGISTRY=${ECR_REGISTRY}
          APP_REPO_NAME=${APP_REPO_NAME}
          EOF
          curl -o "docker-compose.yml" -L https://raw.githubusercontent.com/bkucukala/Project-204/main/docker-compose.yml
          curl -o "phonebook-app.py" -L https://raw.githubusercontent.com/bkucukala/Project-204/main/phonebook-app.py
          docker-compose config | docker stack deploy --with-registry-auth -c - phonebook && docker run --network phonebook_clarusnet -v /home/ec2-user/phonebook:/app python:alpine sh -c 'pip install mysql-connector-python &&  python /app/phonebook-app.py'
          - ECR_REGISTRY: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            APP_REPO_NAME: clarusway-repo/phonebook-app
            GITHUB_REPO: https://github.com/bkucukala/Project-204.git
          curl -o "docker-compose.yml" -L ${GIT_FILE_URL}docker-compose.yml
          curl -o "init.sql" -L ${GIT_FILE_URL}init.sql
          docker-compose config | docker stack deploy --with-registry-auth -c - phonebook
          - ECR_REGISTRY: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            APP_REPO_NAME: clarusway-repo/phonebook-app
            GITHUB_REPO: https://github.com/bkucukala/Project-204.git
            GIT_FILE_URL: https://raw.githubusercontent.com/bkucukala/Project-204/main/

  WorkerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        KeyName: !Ref KeyName
        UserData: !Base64 |
          #! /bin/bash
          yum update -y
          amazon-linux-extras install docker -y
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
          -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          yum install python3 -y
          pip3 install ec2instanceconnectcli
          eval "$(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  \
            --region ${AWS::Region} ${DockerManager1} docker swarm join-token worker | grep -i 'docker')"
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          yum install amazon-ecr-credential-helper -y
          mkdir -p /home/ec2-user/.docker
          cd /home/ec2-user/.docker
          echo '{"credsStore": "ecr-login"}' > config.json

  ManagerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        KeyName: !Ref KeyName
        UserData: !Base64 |
          #! /bin/bash
          yum update -y
          amazon-linux-extras install docker -y
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
          -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          yum install python3 -y
          pip3 install ec2instanceconnectcli
          eval "$(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  \
            --region ${AWS::Region} ${DockerManager1} docker swarm join-token manager | grep -i 'docker')"
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          yum install amazon-ecr-credential-helper -y
          mkdir -p /home/ec2-user/.docker
          cd /home/ec2-user/.docker
          echo '{"credsStore": "ecr-login"}' > config.json

  EC2FullAccessToECR:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
  EC2toECRProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: #required
        - !Ref EC2FullAccessToECR
  DockerMachineSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH for Docker Machine
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2377
          ToPort: 2377
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7946
          ToPort: 7946
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 7946
          ToPort: 7946
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 4789
          ToPort: 4789
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
  GrandMasterDockerMachine:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ab4d1e9cf9a1215a
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      LaunchTemplate: 
        LaunchTemplateId: !Ref GrandMasterLaunchTemplate
        Version: !GetAtt GrandMasterLaunchTemplate.LatestVersionNumber
      IamInstanceProfile: !Ref EC2toECRProfile
      SecurityGroups: 
        - !Ref  DockerMachineSecurityGroup
      Tags:                
        -                        
          Key: Name
          Value: !Sub GrandMaster Docker Machine of ${AWS::StackName} 
  Manager1DockerMachine:
    Type: AWS::EC2::Instance
    DependsOn:
      - GrandMasterDockerMachine
    Properties:
      ImageId: ami-0ab4d1e9cf9a1215a
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      LaunchTemplate: 
        LaunchTemplateId: !Ref ManagerLaunchTemplate
        Version: !GetAtt ManagerLaunchTemplate.LatestVersionNumber
      IamInstanceProfile: !Ref EC2toECRProfile
      SecurityGroups: 
        - !Ref DockerMachineSecurityGroup
      Tags:                
        -                        
          Key: Name
          Value: !Sub Manager1 Docker Machine of ${AWS::StackName} 
  Manager2DockerMachine:
    Type: AWS::EC2::Instance
    DependsOn:
      - Manager1DockerMachine
    Properties:
      ImageId: ami-0ab4d1e9cf9a1215a
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      LaunchTemplate: 
        LaunchTemplateId: !Ref ManagerLaunchTemplate
        Version: !GetAtt ManagerLaunchTemplate.LatestVersionNumber
      IamInstanceProfile: !Ref EC2toECRProfile
      SecurityGroups: 
        - !Ref DockerMachineSecurityGroup
      Tags:                
        -                        
          Key: Name
          Value: !Sub Manager2 Docker Machine of ${AWS::StackName} 
  Worker1DockerMachine:
    Type: AWS::EC2::Instance
    DependsOn:
      - GrandMasterDockerMachine
    Properties:
      ImageId: ami-0aeeebd8d2ab47354
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      LaunchTemplate: 
        LaunchTemplateId: !Ref WorkerLaunchTemplate
        Version: !GetAtt WorkerLaunchTemplate.LatestVersionNumber
      IamInstanceProfile: !Ref EC2toECRProfile
      SecurityGroupIds:
        - !GetAtt DockerMachineSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub Worker1 Docker Machine of ${AWS::StackName}
  Worker2DockerMachine:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0aeeebd8d2ab47354
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      LaunchTemplate: 
        LaunchTemplateId: !Ref WorkerLaunchTemplate
        Version: !GetAtt WorkerLaunchTemplate.LatestVersionNumber
      IamInstanceProfile: !Ref EC2toECRProfile
      SecurityGroupIds:
        - !GetAtt DockerMachineSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub Worker2 Docker Machine of ${AWS::StackName}  
      
Outputs:
  WebsiteURL:
    Description: GrandMAsterDocker Machine DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt GrandMasterDockerMachine.PublicDnsName
  GrandMasterDashboard:
    Description: Dashboard for Docker Swarm
    Value: !Sub 
      - http://${PublicAddress}:8080
      - PublicAddress: !GetAtt GrandMasterDockerMachine.PublicDnsName